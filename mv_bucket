#!/bin/bash

# Created by argbash-init v2.10.0
# ARG_POSITIONAL_SINGLE([bucket],[Bucket to migrate])
# ARG_POSITIONAL_SINGLE([dest_project],[Destination GCP project])
# ARG_DEFAULTS_POS([])
# ARG_HELP([Moves a GCS Bucket from one GCP project to another])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_bucket=
_arg_dest_project=
# THE DEFAULTS INITIALIZATION - OPTIONALS


print_help()
{
	printf '%s\n' "Moves a GCS Bucket from one GCP project to another"
	printf 'Usage: %s [-h|--help] <bucket> <dest_project>\n' "$0"
	printf '\t%s\n' "<bucket>: Bucket to migrate"
	printf '\t%s\n' "<dest_project>: Destination GCP project"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'bucket' and 'dest_project'"
	test "${_positionals_count}" -ge 2 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 2 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 2 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 2 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_bucket _arg_dest_project "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

# vvv  PLACE YOUR CODE HERE  vvv

set -x
set -e

src_bucket=gs://${_arg_bucket#"gs://"}
echo Bucket: $src_bucket

dest_project="$_arg_dest_project"
echo Destination Project: $dest_project

temp_bucket=${src_bucket}-$(tr -dc a-z0-9 </dev/urandom | head -c 5 )
echo Temp Bucket: $temp_bucket

# Test if source bucket has anything in it:
if [ $(gsutil ls ${src_bucket} | wc -l) == 0 ]; then
    echo WARNING: ${src_bucket} is empty. Deleting bucket without moving any files.
    gsutil -m rm -r ${src_bucket}
    sleep 30
    gsutil mb -p ${dest_project} -c STANDARD -l US ${src_bucket}
    exit 0
fi

# Create new temporary bucket in dest proj

gsutil mb -p ${dest_project} -c STANDARD -l US ${temp_bucket}

# Copy all data from source bucket to temp bucket

gsutil -m cp -r ${src_bucket}/* ${temp_bucket}

# Delete source bucket

gsutil -m rm -r ${src_bucket}

# Create new bucket in dest proj

sleep 30
gsutil mb -p ${dest_project} -c STANDARD -l US ${src_bucket}

# Copy all data from temp bucket to new bucket

gsutil -m cp -r ${temp_bucket}/* ${src_bucket}

# Delete temp bucket

gsutil -m rm -r ${temp_bucket}

# Done


# ^^^  TERMINATE YOUR CODE BEFORE THE BOTTOM ARGBASH MARKER  ^^^

# ] <-- needed because of Argbash
